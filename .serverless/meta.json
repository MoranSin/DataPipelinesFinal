{
  "C:\\Users\\adler\\OneDrive\\Documents\\Documents\\GitHub\\DataPipelinesFinal": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "servicePath": "C:\\Users\\adler\\OneDrive\\Documents\\Documents\\GitHub\\DataPipelinesFinal",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "skibidi-pipeline",
      "provider": {
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-east-1"
      },
      "functions": {
        "process": {
          "handler": "crud-api/app.handler",
          "events": [
            {
              "http": {
                "path": "/",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/genres",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/genres/{proxy+}",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/songs",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/songs/{proxy+}",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/artists",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/artists/{proxy+}",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/charts",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/charts/{proxy+}",
                "method": "any"
              }
            }
          ]
        },
        "tiktokBillboardScraper": {
          "handler": "scrapers/tiktokBillboardScraper.tiktokScraper",
          "events": [
            {
              "schedule": {
                "rate": "rate(7 days)",
                "enabled": true
              }
            }
          ]
        },
        "spotifyScraper": {
          "handler": "scrapers/spotifyScraper.spotify_handler",
          "environment": {
            "SPOTIFY_API_KEY": "<REDACTED>",
            "AWS_ACCESS_KEY_ID": "<REDACTED>",
            "AWS_SECRET_ACCESS_KEY": "<REDACTED>"
          },
          "events": [
            {
              "schedule": {
                "rate": "rate(7 days)",
                "enabled": true
              }
            },
            {
              "http": {
                "path": "/spotify-scraper",
                "method": "get"
              }
            }
          ]
        }
      },
      "plugins": [
        "serverless-python-requirements",
        "serverless-offline-sqs",
        "serverless-offline",
        "serverless-dotenv-plugin"
      ],
      "resources": {
        "Resources": {
          "DataRawQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "data-music-q"
            }
          }
        }
      },
      "custom": {
        "serverless-offline-sqs": {
          "autoCreate": true,
          "apiVersion": "2012-11-05",
          "endpoint": "http://sqs:9324",
          "accessKeyId": "<REDACTED>",
          "secretAccessKey": "<REDACTED>",
          "queues": [
            {
              "QueueName": "data-music-q"
            }
          ]
        },
        "serverless-offline": {
          "port": 8001
        }
      }
    },
    "serviceRawFile": "service: skibidi-pipeline\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.9\r\n  region: us-east-1  \r\n\r\nfunctions:\r\n  process:\r\n    handler: crud-api/app.handler\r\n    events:\r\n      - http:\r\n          path: /\r\n          method: any\r\n      - http:\r\n          path: /{proxy+}\r\n          method: any\r\n      - http:\r\n          path: /genres\r\n          method: any\r\n      - http:\r\n          path: /genres/{proxy+}\r\n          method: any\r\n      - http:\r\n          path: /songs\r\n          method: any\r\n      - http:\r\n          path: /songs/{proxy+}\r\n          method: any\r\n      - http:\r\n          path: /artists\r\n          method: any\r\n      - http:\r\n          path: /artists/{proxy+}\r\n          method: any\r\n      - http:\r\n          path: /charts\r\n          method: any\r\n      - http:\r\n          path: /charts/{proxy+}\r\n          method: any\r\n\r\n  tiktokBillboardScraper:\r\n    handler: scrapers/tiktokBillboardScraper.tiktokScraper\r\n    events:\r\n      - schedule:\r\n          rate: rate(7 days)\r\n          enabled: true\r\n      \r\n  spotifyScraper:\r\n    handler: scrapers/spotifyScraper.spotify_handler\r\n    environment:\r\n      SPOTIFY_API_KEY: ${env:SPOTIFY_API_KEY}\r\n      AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}\r\n      AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}\r\n    events:\r\n      - schedule:\r\n          rate: rate(7 days)\r\n          enabled: true\r\n      - http:\r\n          path: /spotify-scraper\r\n          method: get\r\n\r\n  # process:\r\n    # handler: handler.process\r\n    # events:\r\n    #   - sqs:\r\n    #       arn:\r\n    #         Fn::GetAtt:\r\n    #           - DataRawQueue\r\n    #           - Arn\r\n\r\nplugins:\r\n  - serverless-python-requirements\r\n  - serverless-offline-sqs\r\n  - serverless-offline\r\n  - serverless-dotenv-plugin\r\n\r\n\r\nresources:\r\n  Resources:\r\n    DataRawQueue:\r\n      Type: AWS::SQS::Queue\r\n      Properties:\r\n        QueueName: data-music-q\r\n\r\ncustom:\r\n  serverless-offline-sqs:\r\n    autoCreate: true\r\n    apiVersion: '2012-11-05'\r\n    endpoint: http://sqs:9324\r\n    accessKeyId: x\r\n    secretAccessKey: x\r\n    queues:\r\n      - QueueName: data-music-q\r\n  serverless-offline:\r\n    port: 8001    \r\n\r\n\r\n",
    "command": [
      "offline"
    ],
    "options": {},
    "error": {
      "message": "Cannot resolve '${env:SPOTIFY_API_KEY}' variable at 'functions.spotifyScraper.environment.SPOTIFY_API_KEY'. None of the variables returned a value and no default value was provided. Please check your variable definitions or provide a default value.",
      "stack": "Error: Cannot resolve '${env:SPOTIFY_API_KEY}' variable at 'functions.spotifyScraper.environment.SPOTIFY_API_KEY'. None of the variables returned a value and no default value was provided. Please check your variable definitions or provide a default value.\n    at _ResolverManager.resolve (file:///C:/Users/adler/.serverless/releases/4.2.4/package/dist/sf-core.js:947:51362)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async #handlePlaceholderNode (file:///C:/Users/adler/.serverless/releases/4.2.4/package/dist/sf-core.js:947:49852)\n    at async file:///C:/Users/adler/.serverless/releases/4.2.4/package/dist/sf-core.js:947:47884\n    at async processNodeAndHandleCompletion (file:///C:/Users/adler/.serverless/releases/4.2.4/package/dist/sf-core.js:947:39197)",
      "code": "MISSING_VARIABLE_RESULT"
    },
    "machineId": "6f2bc86096df909e9e20dd621c285bd6",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "061fde2a-e94c-47b2-b6af-1ce4c63bd7d9",
    "orgName": "208462184",
    "userId": "pL2mqh7hNwry1ppPF5",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "208462184",
    "subscription": null,
    "userEmail": "adleryasmin@gmail.com",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}