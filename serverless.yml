service: skibidi-pipeline

provider:
  name: aws
  runtime: python3.9
  region: us-east-1  

functions:
  process:
    handler: crud-api/app.handler
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any
      - http:
          path: /genres
          method: any
      - http:
          path: /genres/{proxy+}
          method: any
      - http:
          path: /songs
          method: any
      - http:
          path: /songs/{proxy+}
          method: any
      - http:
          path: /artists
          method: any
      - http:
          path: /artists/{proxy+}
          method: any
      - http:
          path: /charts
          method: any
      - http:
          path: /charts/{proxy+}
          method: any

  # tiktokBillboardScraper:
  #   handler: scrapers/tiktokBillboardScraper/tiktokScraper
  #   environment:
  #     SCHEDULER_NAME: "TikTok Billboard Scraper"
  #   events:
  #     - schedule:
  #         rate: rate(7 days)
  #         enabled: true
      
  # spotifyScraper:
  #   handler: scrapers/spotifyScraper.spotify_handler
  #   environment:
  #     SPOTIFY_API_KEY: ${env:SPOTIFY_API_KEY}
  #     AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
  #     AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
  #     SCHEDULER_NAME: "Spotify Scraper"
  #   events:
  #     - schedule:
  #         rate: rate(7 days)
  #         enabled: true
  #     - http:
  #         path: /spotify-scraper
  #         method: get
  youtubeScraperDaily:
    handler: scrapers/youtubeScraper/youtubeChartsDaily.handler
    environment:
      SCHEDULER_NAME: "YouTube Daily Scraper"
      YOUTUBE_CHARTS_URL_KEY: ${env:YOUTUBE_CHARTS_URL_KEY}
      YOUTUBE_CHARTS_COOKIE: ${env:YOUTUBE_CHARTS_COOKIE}
      YOUTUBE_CHARTS_API_KEY: ${env:YOUTUBE_CHARTS_API_KEY}
      YOUTUBE_TRENDS_COOKIE: ${env:YOUTUBE_TRENDS_COOKIE}
      YOUTUBE_TRENDS_API_KEY: ${env:YOUTUBE_TRENDS_API_KEY}
    events:
      - schedule:
          rate: rate(7 days)
          enabled: true

  youtubeScraperWeekly:
    handler: scrapers/youtubeScraper/youtubeChartsWeekly.handler
    environment:
      SCHEDULER_NAME: "YouTube Weekly Scraper"
      YOUTUBE_CHARTS_URL_KEY: ${env:YOUTUBE_CHARTS_URL_KEY}
      YOUTUBE_CHARTS_COOKIE: ${env:YOUTUBE_CHARTS_COOKIE}
      YOUTUBE_CHARTS_API_KEY: ${env:YOUTUBE_CHARTS_API_KEY}
    events:
      - schedule:
          rate: rate(1 day)
          enabled: true



  # process:
    # handler: handler.process
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt:
    #           - DataRawQueue
    #           - Arn

plugins:
  - serverless-python-requirements
  - serverless-offline-sqs
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-offline-scheduler


resources:
  Resources:
    DataRawQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: data-raw-q

custom:
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://sqs:9324
    accessKeyId: x
    secretAccessKey: x
    queues:
      - QueueName: data-raw-q
  serverless-offline:
    port: 8001    
  pythonRequirements:
    dockerizePip: true
