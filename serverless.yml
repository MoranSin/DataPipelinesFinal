# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: 208462184
service: skibidi-pipeline

provider:
  name: aws
  runtime: python3.9
  region: us-east-1  

functions:
  process:
    handler: crud-api/app.handler
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any
      - http:
          path: /genres
          method: any
      - http:
          path: /genres/{proxy+}
          method: any
      - http:
          path: /songs
          method: any
      - http:
          path: /songs/{proxy+}
          method: any
      - http:
          path: /artists
          method: any
      - http:
          path: /artists/{proxy+}
          method: any
      - http:
          path: /charts
          method: any
      - http:
          path: /charts/{proxy+}
          method: any

  tiktokBillboardScraper:
    handler: scrapers/tiktokBillboardScraper.tiktokScraper
    events:
      - schedule:
          rate: rate(7 days)
          enabled: true
      
  spotifyScraper:
    handler: scrapers/spotifyScraper.spotify_handler
    environment:
      SPOTIFY_API_KEY_WEEKLY: ${env:SPOTIFY_API_KEY_WEEKLY}
      SPOTIFY_API_KEY_DAILY: ${env:SPOTIFY_API_KEY_DAILY}
    events:
      - schedule:
          rate: rate(7 days)
          enabled: true
      - http:
          path: /spotify-scraper
          method: get

  youtubeScraperDaily:
    handler: scrapers/youtubeScraper.youtubeChartsDaily
    events:
      - schedule:
          rate: rate(7 days)
          enabled: true

  youtubeScraperWeekly:
    handler: scrapers/youtubeScraper.youtubeChartsWeekly
    events:
      - schedule:
          rate: rate(1 day)
          enabled: true


  # process:
    # handler: handler.process
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt:
    #           - DataRawQueue
    #           - Arn

plugins:
  - serverless-python-requirements
  - serverless-offline-sqs
  - serverless-offline
  - serverless-dotenv-plugin


resources:
  Resources:
    DataRawQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: data-music-q

custom:
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://sqs:9324
    accessKeyId: x
    secretAccessKey: x
    queues:
      - QueueName: data-music-q
  serverless-offline:
    port: 8001    


